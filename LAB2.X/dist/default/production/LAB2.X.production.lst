

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Feb 02 18:35:37 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.20
    25                           ; Generated 12/02/2020 GMT
    26                           ; 
    27                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F887 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  008F                     	;# 
   103  0090                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  009F                     	;# 
   121  0105                     	;# 
   122  0107                     	;# 
   123  0108                     	;# 
   124  0109                     	;# 
   125  010C                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  010F                     	;# 
   130  0185                     	;# 
   131  0187                     	;# 
   132  0188                     	;# 
   133  0189                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0088                     	;# 
   176  0089                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  008F                     	;# 
   181  0090                     	;# 
   182  0091                     	;# 
   183  0092                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0093                     	;# 
   187  0094                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0098                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  009F                     	;# 
   199  0105                     	;# 
   200  0107                     	;# 
   201  0108                     	;# 
   202  0109                     	;# 
   203  010C                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  0185                     	;# 
   209  0187                     	;# 
   210  0188                     	;# 
   211  0189                     	;# 
   212  018C                     	;# 
   213  018D                     	;# 
   214  0000                     	;# 
   215  0001                     	;# 
   216  0002                     	;# 
   217  0003                     	;# 
   218  0004                     	;# 
   219  0005                     	;# 
   220  0006                     	;# 
   221  0007                     	;# 
   222  0008                     	;# 
   223  0009                     	;# 
   224  000A                     	;# 
   225  000B                     	;# 
   226  000C                     	;# 
   227  000D                     	;# 
   228  000E                     	;# 
   229  000E                     	;# 
   230  000F                     	;# 
   231  0010                     	;# 
   232  0011                     	;# 
   233  0012                     	;# 
   234  0013                     	;# 
   235  0014                     	;# 
   236  0015                     	;# 
   237  0015                     	;# 
   238  0016                     	;# 
   239  0017                     	;# 
   240  0018                     	;# 
   241  0019                     	;# 
   242  001A                     	;# 
   243  001B                     	;# 
   244  001B                     	;# 
   245  001C                     	;# 
   246  001D                     	;# 
   247  001E                     	;# 
   248  001F                     	;# 
   249  0081                     	;# 
   250  0085                     	;# 
   251  0086                     	;# 
   252  0087                     	;# 
   253  0088                     	;# 
   254  0089                     	;# 
   255  008C                     	;# 
   256  008D                     	;# 
   257  008E                     	;# 
   258  008F                     	;# 
   259  0090                     	;# 
   260  0091                     	;# 
   261  0092                     	;# 
   262  0093                     	;# 
   263  0093                     	;# 
   264  0093                     	;# 
   265  0094                     	;# 
   266  0095                     	;# 
   267  0096                     	;# 
   268  0097                     	;# 
   269  0098                     	;# 
   270  0099                     	;# 
   271  009A                     	;# 
   272  009B                     	;# 
   273  009C                     	;# 
   274  009D                     	;# 
   275  009E                     	;# 
   276  009F                     	;# 
   277  0105                     	;# 
   278  0107                     	;# 
   279  0108                     	;# 
   280  0109                     	;# 
   281  010C                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  010F                     	;# 
   286  0185                     	;# 
   287  0187                     	;# 
   288  0188                     	;# 
   289  0189                     	;# 
   290  018C                     	;# 
   291  018D                     	;# 
   292  0000                     	;# 
   293  0001                     	;# 
   294  0002                     	;# 
   295  0003                     	;# 
   296  0004                     	;# 
   297  0005                     	;# 
   298  0006                     	;# 
   299  0007                     	;# 
   300  0008                     	;# 
   301  0009                     	;# 
   302  000A                     	;# 
   303  000B                     	;# 
   304  000C                     	;# 
   305  000D                     	;# 
   306  000E                     	;# 
   307  000E                     	;# 
   308  000F                     	;# 
   309  0010                     	;# 
   310  0011                     	;# 
   311  0012                     	;# 
   312  0013                     	;# 
   313  0014                     	;# 
   314  0015                     	;# 
   315  0015                     	;# 
   316  0016                     	;# 
   317  0017                     	;# 
   318  0018                     	;# 
   319  0019                     	;# 
   320  001A                     	;# 
   321  001B                     	;# 
   322  001B                     	;# 
   323  001C                     	;# 
   324  001D                     	;# 
   325  001E                     	;# 
   326  001F                     	;# 
   327  0081                     	;# 
   328  0085                     	;# 
   329  0086                     	;# 
   330  0087                     	;# 
   331  0088                     	;# 
   332  0089                     	;# 
   333  008C                     	;# 
   334  008D                     	;# 
   335  008E                     	;# 
   336  008F                     	;# 
   337  0090                     	;# 
   338  0091                     	;# 
   339  0092                     	;# 
   340  0093                     	;# 
   341  0093                     	;# 
   342  0093                     	;# 
   343  0094                     	;# 
   344  0095                     	;# 
   345  0096                     	;# 
   346  0097                     	;# 
   347  0098                     	;# 
   348  0099                     	;# 
   349  009A                     	;# 
   350  009B                     	;# 
   351  009C                     	;# 
   352  009D                     	;# 
   353  009E                     	;# 
   354  009F                     	;# 
   355  0105                     	;# 
   356  0107                     	;# 
   357  0108                     	;# 
   358  0109                     	;# 
   359  010C                     	;# 
   360  010C                     	;# 
   361  010D                     	;# 
   362  010E                     	;# 
   363  010F                     	;# 
   364  0185                     	;# 
   365  0187                     	;# 
   366  0188                     	;# 
   367  0189                     	;# 
   368  018C                     	;# 
   369  018D                     	;# 
   370                           
   371                           	psect	idataCOMMON
   372  0144                     __pidataCOMMON:
   373                           
   374                           ;initializer for _portbActual
   375  0144  34FF               	retlw	255
   376                           
   377                           ;initializer for _portbAnterior
   378  0145  34FF               	retlw	255
   379                           
   380                           	psect	idataBANK0
   381  011C                     __pidataBANK0:
   382                           
   383                           ;initializer for _tableDisplay
   384  011C  343F               	retlw	63
   385  011D  3406               	retlw	6
   386  011E  345B               	retlw	91
   387  011F  344F               	retlw	79
   388  0120  3466               	retlw	102
   389  0121  346D               	retlw	109
   390  0122  347D               	retlw	125
   391  0123  3407               	retlw	7
   392  0124  347F               	retlw	127
   393  0125  346F               	retlw	111
   394  0126  3477               	retlw	119
   395  0127  347C               	retlw	124
   396  0128  3458               	retlw	88
   397  0129  345E               	retlw	94
   398  012A  3479               	retlw	121
   399  012B  3471               	retlw	113
   400  001E                     _ADRESH	set	30
   401  001F                     _ADCON0bits	set	31
   402  000C                     _PIR1bits	set	12
   403  0006                     _PORTB	set	6
   404  0007                     _PORTC	set	7
   405  0012                     _T2CON	set	18
   406  000D                     _PIR2	set	13
   407  000B                     _INTCONbits	set	11
   408  0008                     _PORTD	set	8
   409  009F                     _ADCON1bits	set	159
   410  008C                     _PIE1bits	set	140
   411  0081                     _OPTION_REGbits	set	129
   412  0096                     _IOCB	set	150
   413  0088                     _TRISD	set	136
   414  0087                     _TRISC	set	135
   415  0086                     _TRISB	set	134
   416  0085                     _TRISA	set	133
   417  0189                     _ANSELH	set	393
   418  0188                     _ANSEL	set	392
   419                           
   420                           	psect	cinit
   421  0011                     start_initialization:	
   422                           ; #config settings
   423                           
   424  0011                     __initialization:
   425                           
   426                           ; Initialize objects allocated to BANK0
   427  0011  1383               	bcf	3,7	;select IRP bank0
   428  0012  3042               	movlw	low (__pdataBANK0+16)
   429  0013  00FD               	movwf	btemp+-1
   430  0014  3001               	movlw	high __pidataBANK0
   431  0015  00FE               	movwf	btemp
   432  0016  301C               	movlw	low __pidataBANK0
   433  0017  00FF               	movwf	btemp+1
   434  0018  3032               	movlw	low __pdataBANK0
   435  0019  0084               	movwf	4
   436  001A  120A  118A  20FA  120A  118A  	fcall	init_ram0
   437                           
   438                           ; Initialize objects allocated to COMMON
   439  001F  120A  118A  2144  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   440  0024  00FC               	movwf	__pdataCOMMON& (0+127)
   441  0025  120A  118A  2145  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   442  002A  00FD               	movwf	(__pdataCOMMON+1)& (0+127)
   443                           
   444                           ; Clear objects allocated to BANK0
   445  002B  3020               	movlw	low __pbssBANK0
   446  002C  0084               	movwf	4
   447  002D  3032               	movlw	low (__pbssBANK0+18)
   448  002E  120A  118A  213C  120A  118A  	fcall	clear_ram0
   449                           
   450                           ; Clear objects allocated to COMMON
   451  0033  01F7               	clrf	__pbssCOMMON& (0+127)
   452  0034  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   453  0035  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   454  0036  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   455  0037  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
   456  0038                     end_of_initialization:	
   457                           ;End of C runtime variable initialization code
   458                           
   459  0038                     __end_of__initialization:
   460  0038  0183               	clrf	3
   461  0039  120A  118A  28A6   	ljmp	_main	;jump to C main() function
   462                           
   463                           	psect	bssCOMMON
   464  0077                     __pbssCOMMON:
   465  0077                     _timeB1:
   466  0077                     	ds	2
   467  0079                     _micros:
   468  0079                     	ds	2
   469  007B                     _displayPort:
   470  007B                     	ds	1
   471                           
   472                           	psect	dataCOMMON
   473  007C                     __pdataCOMMON:
   474  007C                     _portbActual:
   475  007C                     	ds	1
   476  007D                     _portbAnterior:
   477  007D                     	ds	1
   478                           
   479                           	psect	bssBANK0
   480  0020                     __pbssBANK0:
   481  0020                     _displayDigits:
   482  0020                     	ds	2
   483  0022                     _multiplexors:
   484  0022                     	ds	2
   485  0024                     _timeB2:
   486  0024                     	ds	2
   487  0026                     _ADC_VALUE:
   488  0026                     	ds	12
   489                           
   490                           	psect	dataBANK0
   491  0032                     __pdataBANK0:
   492  0032                     _tableDisplay:
   493  0032                     	ds	16
   494                           
   495                           	psect	inittext
   496  00F6                     init_fetch0:	
   497                           ;	Called with low address in FSR and high address in W
   498                           
   499  00F6  087E               	movf	btemp,w
   500  00F7  008A               	movwf	10
   501  00F8  087F               	movf	btemp+1,w
   502  00F9  0082               	movwf	2
   503  00FA                     init_ram0:	
   504                           ;Called with:
   505                           ;	high address of idata address in btemp 
   506                           ;	low address of idata address in btemp+1 
   507                           ;	low address of data in FSR
   508                           ;	high address + 1 of data in btemp-1
   509                           
   510  00FA  120A  118A  20F6  120A  118A  	fcall	init_fetch0
   511  00FF  0080               	movwf	0
   512  0100  0A84               	incf	4,f
   513  0101  0804               	movf	4,w
   514  0102  067D               	xorwf	btemp+-1,w
   515  0103  1903               	btfsc	3,2
   516  0104  3400               	retlw	0
   517  0105  0AFF               	incf	btemp+1,f
   518  0106  1903               	btfsc	3,2
   519  0107  0AFE               	incf	btemp,f
   520  0108  28FA               	goto	init_ram0
   521                           
   522                           	psect	clrtext
   523  013C                     clear_ram0:	
   524                           ;	Called with FSR containing the base address, and
   525                           ;	W with the last address+1
   526                           
   527  013C  0064               	clrwdt	;clear the watchdog before getting into this loop
   528  013D                     clrloop0:
   529  013D  0180               	clrf	0	;clear RAM location pointed to by FSR
   530  013E  0A84               	incf	4,f	;increment pointer
   531  013F  0604               	xorwf	4,w	;XOR with final address
   532  0140  1903               	btfsc	3,2	;have we reached the end yet?
   533  0141  3400               	retlw	0	;all done for this memory range, return
   534  0142  0604               	xorwf	4,w	;XOR again to restore value
   535  0143  293D               	goto	clrloop0	;do the next byte
   536                           
   537                           	psect	cstackCOMMON
   538  0070                     __pcstackCOMMON:
   539  0070                     ?_initADC:
   540  0070                     ?_readADC:	
   541                           ; 1 bytes @ 0x0
   542                           
   543  0070                     ?_isrADC:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  0070                     ??_isrADC:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  0070                     ?_main:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0070                     ?_isr:	
   553                           ; 1 bytes @ 0x0
   554                           
   555                           
   556                           ; 1 bytes @ 0x0
   557  0070                     	ds	2
   558  0072                     ??_isr:
   559                           
   560                           ; 1 bytes @ 0x2
   561  0072                     	ds	5
   562                           
   563                           	psect	cstackBANK0
   564  0042                     __pcstackBANK0:
   565  0042                     ??_initADC:
   566  0042                     ??_readADC:	
   567                           ; 1 bytes @ 0x0
   568                           
   569                           
   570                           ; 1 bytes @ 0x0
   571  0042                     	ds	1
   572  0043                     readADC@pin:
   573                           
   574                           ; 1 bytes @ 0x1
   575  0043                     	ds	1
   576  0044                     ??_main:
   577                           
   578                           ; 1 bytes @ 0x2
   579  0044                     	ds	1
   580  0045                     main@adc0:
   581                           
   582                           ; 1 bytes @ 0x3
   583  0045                     	ds	1
   584                           
   585                           	psect	maintext
   586  00A6                     __pmaintext:	
   587 ;;
   588 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   589 ;;
   590 ;; *************** function _main *****************
   591 ;; Defined at:
   592 ;;		line 38 in file "main.c"
   593 ;; Parameters:    Size  Location     Type
   594 ;;		None
   595 ;; Auto vars:     Size  Location     Type
   596 ;;  adc0            1    3[BANK0 ] PTR unsigned char 
   597 ;;		 -> ADC_VALUE(12), 
   598 ;; Return value:  Size  Location     Type
   599 ;;                  1    wreg      void 
   600 ;; Registers used:
   601 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   602 ;; Tracked objects:
   603 ;;		On entry : B00/0
   604 ;;		On exit  : 0/0
   605 ;;		Unchanged: 0/0
   606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   607 ;;      Params:         0       0       0       0       0
   608 ;;      Locals:         0       1       0       0       0
   609 ;;      Temps:          0       1       0       0       0
   610 ;;      Totals:         0       2       0       0       0
   611 ;;Total ram usage:        2 bytes
   612 ;; Hardware stack levels required when called:    3
   613 ;; This function calls:
   614 ;;		_initADC
   615 ;;		_readADC
   616 ;; This function is called by:
   617 ;;		Startup code after reset
   618 ;; This function uses a non-reentrant model
   619 ;;
   620                           
   621                           
   622                           ;psect for function _main
   623  00A6                     _main:
   624  00A6                     l998:	
   625                           ;incstack = 0
   626                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   627                           
   628                           
   629                           ;main.c: 39:     ANSEL = 1;
   630  00A6  3001               	movlw	1
   631  00A7  1683               	bsf	3,5	;RP0=1, select bank3
   632  00A8  1703               	bsf	3,6	;RP1=1, select bank3
   633  00A9  0088               	movwf	8	;volatile
   634  00AA                     l1000:
   635                           
   636                           ;main.c: 40:     ANSELH = 0;
   637  00AA  0189               	clrf	9	;volatile
   638  00AB                     l1002:
   639                           
   640                           ;main.c: 41:     TRISA = 1;
   641  00AB  3001               	movlw	1
   642  00AC  1683               	bsf	3,5	;RP0=1, select bank1
   643  00AD  1303               	bcf	3,6	;RP1=0, select bank1
   644  00AE  0085               	movwf	5	;volatile
   645  00AF                     l1004:
   646                           
   647                           ;main.c: 42:     TRISB = 255;
   648  00AF  30FF               	movlw	255
   649  00B0  0086               	movwf	6	;volatile
   650  00B1                     l1006:
   651                           
   652                           ;main.c: 43:     TRISC = 0;
   653  00B1  0187               	clrf	7	;volatile
   654  00B2                     l1008:
   655                           
   656                           ;main.c: 44:     TRISD = 0;
   657  00B2  0188               	clrf	8	;volatile
   658  00B3                     l1010:
   659                           
   660                           ;main.c: 45:     IOCB = 255;
   661  00B3  30FF               	movlw	255
   662  00B4  0096               	movwf	22	;volatile
   663                           
   664                           ;main.c: 46:     PORTD = 0;
   665  00B5  1283               	bcf	3,5	;RP0=0, select bank0
   666  00B6  1303               	bcf	3,6	;RP1=0, select bank0
   667  00B7  0188               	clrf	8	;volatile
   668  00B8                     l1012:
   669                           
   670                           ;main.c: 47:     OPTION_REGbits.nRBPU = 0;
   671  00B8  1683               	bsf	3,5	;RP0=1, select bank1
   672  00B9  1303               	bcf	3,6	;RP1=0, select bank1
   673  00BA  1381               	bcf	1,7	;volatile
   674  00BB                     l1014:
   675                           
   676                           ;main.c: 49:     INTCONbits.GIE = 1;
   677  00BB  178B               	bsf	11,7	;volatile
   678  00BC                     l1016:
   679                           
   680                           ;main.c: 50:     INTCONbits.PEIE = 1;
   681  00BC  170B               	bsf	11,6	;volatile
   682  00BD                     l1018:
   683                           
   684                           ;main.c: 51:     INTCONbits.RBIE = 1;
   685  00BD  158B               	bsf	11,3	;volatile
   686  00BE                     l1020:
   687                           
   688                           ;main.c: 52:     PIE1bits.TMR2IE = 1;
   689  00BE  148C               	bsf	12,1	;volatile
   690  00BF                     l1022:
   691                           
   692                           ;main.c: 54:     PIR2 = 50;
   693  00BF  3032               	movlw	50
   694  00C0  1283               	bcf	3,5	;RP0=0, select bank0
   695  00C1  1303               	bcf	3,6	;RP1=0, select bank0
   696  00C2  008D               	movwf	13	;volatile
   697  00C3                     l1024:
   698                           
   699                           ;main.c: 57:     T2CON = 0b00000100;
   700  00C3  3004               	movlw	4
   701  00C4  0092               	movwf	18	;volatile
   702  00C5                     l1026:
   703                           
   704                           ;main.c: 60:     initADC();
   705  00C5  120A  118A  212C  120A  118A  	fcall	_initADC
   706  00CA                     l1028:
   707                           
   708                           ;main.c: 64:         adc0 = readADC(0);
   709  00CA  3000               	movlw	0
   710  00CB  120A  118A  20DE  120A  118A  	fcall	_readADC
   711  00D0  1283               	bcf	3,5	;RP0=0, select bank0
   712  00D1  1303               	bcf	3,6	;RP1=0, select bank0
   713  00D2  00C4               	movwf	??_main
   714  00D3  0844               	movf	??_main,w
   715  00D4  00C5               	movwf	main@adc0
   716  00D5                     l1030:
   717                           
   718                           ;main.c: 65:         PORTC = *adc0;
   719  00D5  0845               	movf	main@adc0,w
   720  00D6  0084               	movwf	4
   721  00D7  1383               	bcf	3,7	;select IRP bank0
   722  00D8  0800               	movf	0,w
   723  00D9  0087               	movwf	7	;volatile
   724  00DA  28CA               	goto	l1028
   725  00DB  120A  118A  280E   	ljmp	start
   726  00DE                     __end_of_main:
   727                           
   728                           	psect	text1
   729  00DE                     __ptext1:	
   730 ;; *************** function _readADC *****************
   731 ;; Defined at:
   732 ;;		line 44 in file "ADC.c"
   733 ;; Parameters:    Size  Location     Type
   734 ;;  pin             1    wreg     unsigned char 
   735 ;; Auto vars:     Size  Location     Type
   736 ;;  pin             1    1[BANK0 ] unsigned char 
   737 ;; Return value:  Size  Location     Type
   738 ;;                  1    wreg      PTR unsigned char 
   739 ;; Registers used:
   740 ;;		wreg, status,2, status,0
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   746 ;;      Params:         0       0       0       0       0
   747 ;;      Locals:         0       1       0       0       0
   748 ;;      Temps:          0       1       0       0       0
   749 ;;      Totals:         0       2       0       0       0
   750 ;;Total ram usage:        2 bytes
   751 ;; Hardware stack levels used:    1
   752 ;; Hardware stack levels required when called:    2
   753 ;; This function calls:
   754 ;;		Nothing
   755 ;; This function is called by:
   756 ;;		_main
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           
   761                           ;psect for function _readADC
   762  00DE                     _readADC:
   763                           
   764                           ;incstack = 0
   765                           ; Regs used in _readADC: [wreg+status,2+status,0]
   766                           ;readADC@pin stored from wreg
   767  00DE  1283               	bcf	3,5	;RP0=0, select bank0
   768  00DF  1303               	bcf	3,6	;RP1=0, select bank0
   769  00E0  00C3               	movwf	readADC@pin
   770  00E1                     l834:
   771                           
   772                           ;ADC.c: 45:     if (ADCON0bits.GO ==0 ){
   773  00E1  189F               	btfsc	31,1	;volatile
   774  00E2  28E4               	goto	u121
   775  00E3  28E5               	goto	u120
   776  00E4                     u121:
   777  00E4  28F3               	goto	l87
   778  00E5                     u120:
   779  00E5                     l836:
   780                           
   781                           ;ADC.c: 46:          ADCON0bits.CHS = pin;
   782  00E5  0843               	movf	readADC@pin,w
   783  00E6  00C2               	movwf	??_readADC
   784  00E7  0DC2               	rlf	??_readADC,f
   785  00E8  0DC2               	rlf	??_readADC,f
   786  00E9  081F               	movf	31,w	;volatile
   787  00EA  0642               	xorwf	??_readADC,w
   788  00EB  39C3               	andlw	-61
   789  00EC  0642               	xorwf	??_readADC,w
   790  00ED  009F               	movwf	31	;volatile
   791  00EE                     l838:
   792                           
   793                           ;ADC.c: 47:         _delay((unsigned long)((3)*(4000000/4000000.0)));
   794  00EE  28EF               	nop2	;2 cycle nop
   795  00EF  0000               	nop
   796  00F0                     l840:
   797                           
   798                           ;ADC.c: 48:         ADCON0bits.GO = 1;
   799  00F0  1283               	bcf	3,5	;RP0=0, select bank0
   800  00F1  1303               	bcf	3,6	;RP1=0, select bank0
   801  00F2  149F               	bsf	31,1	;volatile
   802  00F3                     l87:	
   803                           ;ADC.c: 49:     }
   804                           
   805                           
   806                           ;ADC.c: 50:     return &ADC_VALUE[pin];
   807  00F3  0843               	movf	readADC@pin,w
   808  00F4  3E26               	addlw	(low (_ADC_VALUE| 0))& (0+255)
   809  00F5                     l88:
   810  00F5  0008               	return
   811  00F6                     __end_of_readADC:
   812                           
   813                           	psect	text2
   814  012C                     __ptext2:	
   815 ;; *************** function _initADC *****************
   816 ;; Defined at:
   817 ;;		line 23 in file "ADC.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;		None
   820 ;; Auto vars:     Size  Location     Type
   821 ;;		None
   822 ;; Return value:  Size  Location     Type
   823 ;;                  1    wreg      void 
   824 ;; Registers used:
   825 ;;		wreg, status,2, status,0
   826 ;; Tracked objects:
   827 ;;		On entry : 0/0
   828 ;;		On exit  : 0/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   831 ;;      Params:         0       0       0       0       0
   832 ;;      Locals:         0       0       0       0       0
   833 ;;      Temps:          0       0       0       0       0
   834 ;;      Totals:         0       0       0       0       0
   835 ;;Total ram usage:        0 bytes
   836 ;; Hardware stack levels used:    1
   837 ;; Hardware stack levels required when called:    2
   838 ;; This function calls:
   839 ;;		Nothing
   840 ;; This function is called by:
   841 ;;		_main
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           
   846                           ;psect for function _initADC
   847  012C                     _initADC:
   848  012C                     l984:	
   849                           ;incstack = 0
   850                           ; Regs used in _initADC: [wreg+status,2+status,0]
   851                           
   852                           
   853                           ;ADC.c: 30:     ADCON0bits.ADCS = 1;
   854  012C  1283               	bcf	3,5	;RP0=0, select bank0
   855  012D  1303               	bcf	3,6	;RP1=0, select bank0
   856  012E  081F               	movf	31,w	;volatile
   857  012F  393F               	andlw	-193
   858  0130  3840               	iorlw	64
   859  0131  009F               	movwf	31	;volatile
   860  0132                     l986:
   861                           
   862                           ;ADC.c: 35:     PIE1bits.ADIE = 1;
   863  0132  1683               	bsf	3,5	;RP0=1, select bank1
   864  0133  1303               	bcf	3,6	;RP1=0, select bank1
   865  0134  170C               	bsf	12,6	;volatile
   866  0135                     l988:
   867                           
   868                           ;ADC.c: 37:     ADCON1bits.ADFM = 0;
   869  0135  139F               	bcf	31,7	;volatile
   870  0136                     l990:
   871                           
   872                           ;ADC.c: 38:     ADCON1bits.VCFG1 = 0;
   873  0136  129F               	bcf	31,5	;volatile
   874  0137                     l992:
   875                           
   876                           ;ADC.c: 39:     ADCON1bits.VCFG0 = 0;
   877  0137  121F               	bcf	31,4	;volatile
   878  0138                     l994:
   879                           
   880                           ;ADC.c: 40:     ADCON0bits.ADON = 1;
   881  0138  1283               	bcf	3,5	;RP0=0, select bank0
   882  0139  1303               	bcf	3,6	;RP1=0, select bank0
   883  013A  141F               	bsf	31,0	;volatile
   884  013B                     l84:
   885  013B  0008               	return
   886  013C                     __end_of_initADC:
   887                           
   888                           	psect	text3
   889  003C                     __ptext3:	
   890 ;; *************** function _isr *****************
   891 ;; Defined at:
   892 ;;		line 71 in file "main.c"
   893 ;; Parameters:    Size  Location     Type
   894 ;;		None
   895 ;; Auto vars:     Size  Location     Type
   896 ;;		None
   897 ;; Return value:  Size  Location     Type
   898 ;;                  1    wreg      void 
   899 ;; Registers used:
   900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   901 ;; Tracked objects:
   902 ;;		On entry : 0/0
   903 ;;		On exit  : 0/0
   904 ;;		Unchanged: 0/0
   905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   906 ;;      Params:         0       0       0       0       0
   907 ;;      Locals:         0       0       0       0       0
   908 ;;      Temps:          5       0       0       0       0
   909 ;;      Totals:         5       0       0       0       0
   910 ;;Total ram usage:        5 bytes
   911 ;; Hardware stack levels used:    1
   912 ;; Hardware stack levels required when called:    1
   913 ;; This function calls:
   914 ;;		_isrADC
   915 ;; This function is called by:
   916 ;;		Interrupt level 1
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           
   921                           ;psect for function _isr
   922  003C                     _isr:
   923  003C                     i1l886:
   924                           
   925                           ;main.c: 72:     if (INTCONbits.RBIF == 1 ){
   926  003C  1C0B               	btfss	11,0	;volatile
   927  003D  283F               	goto	u14_21
   928  003E  2840               	goto	u14_20
   929  003F                     u14_21:
   930  003F  288B               	goto	i1l912
   931  0040                     u14_20:
   932  0040                     i1l888:
   933                           
   934                           ;main.c: 73:         portbAnterior = portbActual;
   935  0040  087C               	movf	_portbActual,w	;volatile
   936  0041  00F2               	movwf	??_isr
   937  0042  0872               	movf	??_isr,w
   938  0043  00FD               	movwf	_portbAnterior	;volatile
   939                           
   940                           ;main.c: 74:         portbActual = PORTB;
   941  0044  1283               	bcf	3,5	;RP0=0, select bank0
   942  0045  1303               	bcf	3,6	;RP1=0, select bank0
   943  0046  0806               	movf	6,w	;volatile
   944  0047  00F2               	movwf	??_isr
   945  0048  0872               	movf	??_isr,w
   946  0049  00FC               	movwf	_portbActual	;volatile
   947  004A                     i1l890:
   948                           
   949                           ;main.c: 76:         if ((portbAnterior & 1) == 0 && (portbActual & 1) == 1){
   950  004A  187D               	btfsc	_portbAnterior,0	;volatile
   951  004B  284D               	goto	u15_21
   952  004C  284E               	goto	u15_20
   953  004D                     u15_21:
   954  004D  286B               	goto	i1l900
   955  004E                     u15_20:
   956  004E                     i1l892:
   957  004E  1C7C               	btfss	_portbActual,0	;volatile
   958  004F  2851               	goto	u16_21
   959  0050  2852               	goto	u16_20
   960  0051                     u16_21:
   961  0051  286B               	goto	i1l900
   962  0052                     u16_20:
   963  0052                     i1l894:
   964                           
   965                           ;main.c: 78:             if (micros - timeB1 >= 50){
   966  0052  0877               	movf	_timeB1,w	;volatile
   967  0053  0279               	subwf	_micros,w	;volatile
   968  0054  00F2               	movwf	??_isr
   969  0055  0878               	movf	_timeB1+1,w	;volatile
   970  0056  1C03               	skipc
   971  0057  0A78               	incf	_timeB1+1,w	;volatile
   972  0058  027A               	subwf	_micros+1,w	;volatile
   973  0059  00F3               	movwf	??_isr+1
   974  005A  3000               	movlw	0
   975  005B  0273               	subwf	??_isr+1,w
   976  005C  3032               	movlw	50
   977  005D  1903               	skipnz
   978  005E  0272               	subwf	??_isr,w
   979  005F  1C03               	skipc
   980  0060  2862               	goto	u17_21
   981  0061  2863               	goto	u17_20
   982  0062                     u17_21:
   983  0062  286B               	goto	i1l900
   984  0063                     u17_20:
   985  0063                     i1l896:
   986                           
   987                           ;main.c: 81:                 timeB1 = micros;
   988  0063  087A               	movf	_micros+1,w	;volatile
   989  0064  00F8               	movwf	_timeB1+1	;volatile
   990  0065  0879               	movf	_micros,w	;volatile
   991  0066  00F7               	movwf	_timeB1	;volatile
   992  0067                     i1l898:
   993                           
   994                           ;main.c: 82:                 PORTD++;
   995  0067  3001               	movlw	1
   996  0068  00F2               	movwf	??_isr
   997  0069  0872               	movf	??_isr,w
   998  006A  0788               	addwf	8,f	;volatile
   999  006B                     i1l900:
  1000                           
  1001                           ;main.c: 86:         if((portbAnterior & 2) == 0 && (portbActual & 2) == 2){
  1002  006B  18FD               	btfsc	_portbAnterior,1	;volatile
  1003  006C  286E               	goto	u18_21
  1004  006D  286F               	goto	u18_20
  1005  006E                     u18_21:
  1006  006E  288A               	goto	i1l910
  1007  006F                     u18_20:
  1008  006F                     i1l902:
  1009  006F  1CFC               	btfss	_portbActual,1	;volatile
  1010  0070  2872               	goto	u19_21
  1011  0071  2873               	goto	u19_20
  1012  0072                     u19_21:
  1013  0072  288A               	goto	i1l910
  1014  0073                     u19_20:
  1015  0073                     i1l904:
  1016                           
  1017                           ;main.c: 87:             if(micros - timeB2 >= 50){
  1018  0073  0824               	movf	_timeB2,w	;volatile
  1019  0074  0279               	subwf	_micros,w	;volatile
  1020  0075  00F2               	movwf	??_isr
  1021  0076  0825               	movf	_timeB2+1,w	;volatile
  1022  0077  1C03               	skipc
  1023  0078  0A25               	incf	_timeB2+1,w	;volatile
  1024  0079  027A               	subwf	_micros+1,w	;volatile
  1025  007A  00F3               	movwf	??_isr+1
  1026  007B  3000               	movlw	0
  1027  007C  0273               	subwf	??_isr+1,w
  1028  007D  3032               	movlw	50
  1029  007E  1903               	skipnz
  1030  007F  0272               	subwf	??_isr,w
  1031  0080  1C03               	skipc
  1032  0081  2883               	goto	u20_21
  1033  0082  2884               	goto	u20_20
  1034  0083                     u20_21:
  1035  0083  288A               	goto	i1l910
  1036  0084                     u20_20:
  1037  0084                     i1l906:
  1038                           
  1039                           ;main.c: 88:                 timeB2 = micros;
  1040  0084  087A               	movf	_micros+1,w	;volatile
  1041  0085  00A5               	movwf	_timeB2+1	;volatile
  1042  0086  0879               	movf	_micros,w	;volatile
  1043  0087  00A4               	movwf	_timeB2	;volatile
  1044  0088                     i1l908:
  1045                           
  1046                           ;main.c: 89:                 PORTD--;
  1047  0088  3001               	movlw	1
  1048  0089  0288               	subwf	8,f	;volatile
  1049  008A                     i1l910:
  1050                           
  1051                           ;main.c: 93:         INTCONbits.RBIF = 0;
  1052  008A  100B               	bcf	11,0	;volatile
  1053  008B                     i1l912:
  1054                           
  1055                           ;main.c: 96:      if (PIR1bits.TMR2IF ==1){
  1056  008B  1283               	bcf	3,5	;RP0=0, select bank0
  1057  008C  1303               	bcf	3,6	;RP1=0, select bank0
  1058  008D  1C8C               	btfss	12,1	;volatile
  1059  008E  2890               	goto	u21_21
  1060  008F  2891               	goto	u21_20
  1061  0090                     u21_21:
  1062  0090  2898               	goto	i1l918
  1063  0091                     u21_20:
  1064  0091                     i1l914:
  1065                           
  1066                           ;main.c: 97:         PIR1bits.TMR2IF = 0;
  1067  0091  108C               	bcf	12,1	;volatile
  1068  0092                     i1l916:
  1069                           
  1070                           ;main.c: 98:         micros+= 50;
  1071  0092  3032               	movlw	50
  1072  0093  07F9               	addwf	_micros,f	;volatile
  1073  0094  1803               	skipnc
  1074  0095  0AFA               	incf	_micros+1,f	;volatile
  1075  0096  3000               	movlw	0
  1076  0097  07FA               	addwf	_micros+1,f	;volatile
  1077  0098                     i1l918:
  1078                           
  1079                           ;main.c: 101:     isrADC();
  1080  0098  120A  118A  2109  120A  118A  	fcall	_isrADC
  1081  009D                     i1l67:
  1082  009D  0876               	movf	??_isr+4,w
  1083  009E  008A               	movwf	10
  1084  009F  0875               	movf	??_isr+3,w
  1085  00A0  0084               	movwf	4
  1086  00A1  0E74               	swapf	??_isr+2,w
  1087  00A2  0083               	movwf	3
  1088  00A3  0EFE               	swapf	btemp,f
  1089  00A4  0E7E               	swapf	btemp,w
  1090  00A5  0009               	retfie
  1091  00A6                     __end_of_isr:
  1092                           
  1093                           	psect	intentry
  1094  0004                     __pintentry:	
  1095                           ;incstack = 0
  1096                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1097                           
  1098  0004                     interrupt_function:
  1099  007E                     saved_w	set	btemp
  1100  0004  00FE               	movwf	btemp
  1101  0005  0E03               	swapf	3,w
  1102  0006  00F4               	movwf	??_isr+2
  1103  0007  0804               	movf	4,w
  1104  0008  00F5               	movwf	??_isr+3
  1105  0009  080A               	movf	10,w
  1106  000A  00F6               	movwf	??_isr+4
  1107  000B  120A  118A  283C   	ljmp	_isr
  1108                           
  1109                           	psect	text4
  1110  0109                     __ptext4:	
  1111 ;; *************** function _isrADC *****************
  1112 ;; Defined at:
  1113 ;;		line 54 in file "ADC.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;		None
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;		None
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  1    wreg      void 
  1120 ;; Registers used:
  1121 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1127 ;;      Params:         0       0       0       0       0
  1128 ;;      Locals:         0       0       0       0       0
  1129 ;;      Temps:          2       0       0       0       0
  1130 ;;      Totals:         2       0       0       0       0
  1131 ;;Total ram usage:        2 bytes
  1132 ;; Hardware stack levels used:    1
  1133 ;; This function calls:
  1134 ;;		Nothing
  1135 ;; This function is called by:
  1136 ;;		_isr
  1137 ;; This function uses a non-reentrant model
  1138 ;;
  1139                           
  1140                           
  1141                           ;psect for function _isrADC
  1142  0109                     _isrADC:
  1143  0109                     i1l844:	
  1144                           ;incstack = 0
  1145                           ; Regs used in _isrADC: [wreg-fsr0h+status,2+status,0]
  1146                           
  1147                           
  1148                           ;ADC.c: 55:     if(PIR1bits.ADIF == 1){
  1149  0109  1283               	bcf	3,5	;RP0=0, select bank0
  1150  010A  1303               	bcf	3,6	;RP1=0, select bank0
  1151  010B  1F0C               	btfss	12,6	;volatile
  1152  010C  290E               	goto	u13_21
  1153  010D  290F               	goto	u13_20
  1154  010E                     u13_21:
  1155  010E  291B               	goto	i1l92
  1156  010F                     u13_20:
  1157  010F                     i1l846:
  1158                           
  1159                           ;ADC.c: 56:         ADC_VALUE[ADCON0bits.CHS] = ADRESH;
  1160  010F  081E               	movf	30,w	;volatile
  1161  0110  00F0               	movwf	??_isrADC
  1162  0111  0C1F               	rrf	31,w	;volatile
  1163  0112  00F1               	movwf	??_isrADC+1
  1164  0113  0C71               	rrf	??_isrADC+1,w
  1165  0114  390F               	andlw	15
  1166  0115  3E26               	addlw	(low (_ADC_VALUE| 0))& (0+255)
  1167  0116  0084               	movwf	4
  1168  0117  0870               	movf	??_isrADC,w
  1169  0118  1383               	bcf	3,7	;select IRP bank0
  1170  0119  0080               	movwf	0
  1171  011A                     i1l848:
  1172                           
  1173                           ;ADC.c: 57:         PIR1bits.ADIF = 0;
  1174  011A  130C               	bcf	12,6	;volatile
  1175  011B                     i1l92:
  1176  011B  0008               	return
  1177  011C                     __end_of_isrADC:
  1178  007E                     btemp	set	126	;btemp
  1179  007E                     wtemp0	set	126
  1180                           
  1181                           	psect	config
  1182                           
  1183                           ;Config register CONFIG1 @ 0x2007
  1184                           ;	Oscillator Selection bits
  1185                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1186                           ;	Watchdog Timer Enable bit
  1187                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1188                           ;	Power-up Timer Enable bit
  1189                           ;	PWRTE = OFF, PWRT disabled
  1190                           ;	RE3/MCLR pin function select bit
  1191                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1192                           ;	Code Protection bit
  1193                           ;	CP = OFF, Program memory code protection is disabled
  1194                           ;	Data Code Protection bit
  1195                           ;	CPD = OFF, Data memory code protection is disabled
  1196                           ;	Brown Out Reset Selection bits
  1197                           ;	BOREN = OFF, BOR disabled
  1198                           ;	Internal External Switchover bit
  1199                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1200                           ;	Fail-Safe Clock Monitor Enabled bit
  1201                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1202                           ;	Low Voltage Programming Enable bit
  1203                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1204                           ;	In-Circuit Debugger Mode bit
  1205                           ;	DEBUG = 0x1, unprogrammed default
  1206  2007                     	org	8199
  1207  2007  20D4               	dw	8404
  1208                           
  1209                           ;Config register CONFIG2 @ 0x2008
  1210                           ;	Brown-out Reset Selection bit
  1211                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1212                           ;	Flash Program Memory Self Write Enable bits
  1213                           ;	WRT = OFF, Write protection off
  1214  2008                     	org	8200
  1215  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80      4      38
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    multiplexors	PTR bit [2] size(1) Largest target is 0

    displayPort	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__readADC	PTR unsigned char  size(1) Largest target is 12
		 -> ADC_VALUE(BANK0[12]), 

    main@adc0	PTR unsigned char  size(1) Largest target is 12
		 -> ADC_VALUE(BANK0[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_isrADC

Critical Paths under _main in BANK0

    _main->_readADC

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0      78
                                              2 BANK0      2     2      0
                            _initADC
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  5     5      0       0
                                              2 COMMON     5     5      0
                             _isrADC
 ---------------------------------------------------------------------------------
 (3) _isrADC                                               2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initADC
   _readADC

 _isr (ROOT)
   _isrADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      4      26       5       47.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      34      12        0.0%
ABS                  0      0      34       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Feb 02 18:35:37 2021

                      pc 0002                       l84 013B                       l87 00F3  
                     l88 00F5                       fsr 0004                      l840 00F0  
                    l834 00E1                      l836 00E5                      l838 00EE  
                    l990 0136                      l992 0137                      l984 012C  
                    l994 0138                      l986 0132                      l988 0135  
                    l998 00A6                      u120 00E5                      u121 00E4  
                    _isr 003C                      fsr0 0004                      indf 0000  
                   l1000 00AA                     l1010 00B3                     l1002 00AB  
                   l1020 00BE                     l1012 00B8                     l1004 00AF  
                   l1030 00D5                     l1022 00BF                     l1014 00BB  
                   l1006 00B1                     l1024 00C3                     l1016 00BC  
                   l1008 00B2                     l1026 00C5                     l1018 00BD  
                   l1028 00CA                     ?_isr 0070                     _IOCB 0096  
                   _PIR2 000D                     i1l67 009D                     i1l92 011B  
                   _main 00A6                     btemp 007E                     start 000E  
                  ??_isr 0072                    ?_main 0070                    _ANSEL 0188  
                  _T2CON 0012                    i1l900 006B                    i1l902 006F  
                  i1l910 008A                    i1l904 0073                    i1l912 008B  
                  i1l914 0091                    i1l906 0084                    i1l844 0109  
                  i1l916 0092                    i1l908 0088                    i1l846 010F  
                  i1l918 0098                    i1l848 011A                    i1l890 004A  
                  i1l892 004E                    i1l894 0052                    i1l886 003C  
                  i1l896 0063                    i1l888 0040                    i1l898 0067  
                  u20_20 0084                    u20_21 0083                    u13_20 010F  
                  u21_20 0091                    u13_21 010E                    u21_21 0090  
                  u14_20 0040                    u14_21 003F                    u15_20 004E  
                  u15_21 004D                    u16_20 0052                    u16_21 0051  
                  u17_20 0063                    u17_21 0062                    u18_20 006F  
                  u18_21 006E                    u19_20 0073                    u19_21 0072  
                  _PORTB 0006                    _PORTC 0007                    _PORTD 0008  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088          __end_of_initADC 013C          __end_of_readADC 00F6  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0011             __end_of_main 00DE                   ??_main 0044  
                 _ADRESH 001E                   _ANSELH 0189                   _isrADC 0109  
                 _micros 0079                   _timeB1 0077                   _timeB2 0024  
              ??_initADC 0042                ??_readADC 0042             __pdataCOMMON 007C  
                 saved_w 007E  __end_of__initialization 0038           __pcstackCOMMON 0070  
           __pidataBANK0 011C           _OPTION_REGbits 0081               __pbssBANK0 0020  
             __pmaintext 00A6               __pintentry 0004                  ?_isrADC 0070  
              _ADC_VALUE 0026          __size_of_isrADC 0013                  __ptext1 00DE  
                __ptext2 012C                  __ptext3 003C                  __ptext4 0109  
                _initADC 012C                  _readADC 00DE             __size_of_isr 006A  
                clrloop0 013D     end_of_initialization 0038            __pidataCOMMON 0144  
         __end_of_isrADC 011C               readADC@pin 0043      start_initialization 0011  
            __end_of_isr 00A6               init_fetch0 00F6                 ??_isrADC 0070  
            __pdataBANK0 0032              __pbssCOMMON 0077                ___latbits 0002  
          __pcstackBANK0 0042             _tableDisplay 0032                 ?_initADC 0070  
               ?_readADC 0070        interrupt_function 0004                clear_ram0 013C  
               _PIE1bits 008C                 _PIR1bits 000C              _displayPort 007B  
             _ADCON0bits 001F               _ADCON1bits 009F         __size_of_initADC 0010  
       __size_of_readADC 0018            __size_of_main 0038                 main@adc0 0045  
             _INTCONbits 000B                 init_ram0 00FA            _portbAnterior 007D  
               intlevel1 0000             _multiplexors 0022            _displayDigits 0020  
            _portbActual 007C  
